package com.sky.hiwise.algorithms.leetcode.greedy;

public class MinCostMoveChipsSamePosition1217 {
    /**
     * 1217. 玩筹码
     * 数轴上放置了一些筹码，每个筹码的位置存在数组 chips 当中。
     * 你可以对 任何筹码 执行下面两种操作之一（不限操作次数，0 次也可以）：
     * 将第 i 个筹码向左或者右移动 2 个单位，代价为 0。
     * 将第 i 个筹码向左或者右移动 1 个单位，代价为 1。
     * 最开始的时候，同一位置上也可能放着两个或者更多的筹码。
     * 返回将所有筹码移动到同一位置（任意位置）上所需要的最小代价。
     * 示例 1：
     * 输入：chips = [1,2,3]
     * 输出：1
     * 解释：第二个筹码移动到位置三的代价是 1，第一个筹码移动到位置三的代价是 0，总代价为 1。
     * 示例 2：
     * 输入：chips = [2,2,2,3,3]
     * 输出：2
     * 解释：第四和第五个筹码移动到位置二的代价都是 1，所以最小总代价为 2。
     * 提示：
     * 1 <= chips.length <= 100
     * 1 <= chips[i] <= 10^9
     */
    public int minCostToMoveChips(int[] position) {
        int event = 0, odd = 0;
        for (int i = 0; i < position.length; i++) {
            if ((position[i] & 1) == 0) {
                event++;
            } else {
                odd++;
            }
        }
        return Math.min(event, odd);
    }
    /**
     * 难点在于理解题目意思。chips = [1, 2, 2, 2, 3, 15, 23] 意味着位置1有1个筹码，位置2有3个筹码，同样位置3、15、23各有1个筹码。
     * 把所有筹码移动到一个位置，移动两步代价为0，那其实我就可以把所有“奇数位置”筹码移动到一个点A（奇数位置），且不必花费任何代价；
     * 同理，所有“偶数位置”的筹码移动到点B（偶数位置）也不需要任何代价。
     * 最终就是看A,B两点谁的筹码数多，把少的筹码移动到多的筹码的位置，每一个筹码的代价都是1。
     */
}
